#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

=============================================================================
Created on Fri Sep 16 17:43:46 2022
@author: arthurlecoz

DTT_Yasa_v1.py

- Input : File w/ eeg + hypnograms
        -> Filename should be the same, only the extension different :
            i.e. : P001.edf & hypno : P001.txt
- Ouput : Hypnopred (.csv) + HypnoProba (.csv)
                    
=============================================================================
"""
# %% DTT_YASA_101 :

'''
Before considering using this script,
Start by opening your terminal window

...
< Insert how to create conda_env >
...

Then simply run the command :
    pip install -r path/to/requirements.txt

Then you should be able to freely use the function below :

edf_to_yasa_ASSA(
        raw_dir = 'path/to/raws', 
        hypno_dir = 'path/to/hypnograms',
        output_dir = 'path/to/output/file', 
        file_ext = 'path/to/raw/files', 
        central_ch = 'C3',
        mastoid_ref = 'A2',
        emg_ch1 = 'EMG 1',
        emg_ch2 = 'EMG 2',
        eog_ch = 'EOG G',
        overwrite = True
        )

Then, an hypnogram generated by Yasa's automated sleep algorithm should be
saved to your "output_dir", along with a .csv with the different sleep stages
and their probability to be scored for each epoch of 30sec.

If any problem met, contact me at :
    arthur.lecoz00@gmail.com

'''


# %% Functions

def edf_to_yasa_ASSA(
        raw_dir, 
        hypno_dir,
        output_dir, 
        file_ext, 
        central_ch,
        mastoid_ref,
        emg_ch1,
        emg_ch2,
        eog_ch,
        overwrite : bool = False
        ):
    
    '''

    Parameters
    ----------
    raw_dir : string
        Pathway toward raw edf files.
    hypno_dir : string
        Pathway toward hypnograms.
    output_dir : string
        Pathway toward output files.
    file_ext : string
        Extension of the raw file (ex : .edf).
    central_ch : string
        Name of the central channel.
    mastoid_ref : string
        Name of the mastoid channel.
    emg_ch1 : string
        Name of the EMG channel 1.
    emg_ch2 : string
        Name of the EMG channel 2.
    eog_ch : string
        Name of the EOG channel.
    overwrite : boolean
        If False, will skip over filename already processed.

    Returns
    -------
    None.

    '''
    
    import mne, pathlib, os, os.path, numpy as np, pandas as pd
    import yasa
    import glob
    
    path_raw_dir = pathlib.Path(raw_dir)
    path_hypno_dir = pathlib.Path(hypno_dir)
    path_output_dir = pathlib.Path(output_dir)
    
    for filename in os.listdir(raw_dir):
        if filename.endswith(file_ext):
            if overwrite == False :
                checkname = filename[:-4] + "_hypnopred.txt"
                if os.path.isfile(path_output_dir/checkname):
                    continue
            else :
                print("...Processing : ", filename, "...\n")
                
                #### Import & Preprocess
                
                raw =  mne.io.read_raw(path_raw_dir/filename, 
                                       preload=False, verbose=None)
                ch_select = [
                    central_ch, 
                    mastoid_ref, 
                    emg_ch1, 
                    emg_ch2, 
                    eog_ch
                    ]
                raw.pick(ch_select)
                raw.load_data()
                raw.resample(100, npad="auto")
                
                mapping_type = {emg_ch1 : 'emg', emg_ch2 : 'emg'}
                raw.set_channel_types(mapping_type, verbose=None)
                
                mne.set_eeg_reference(
                    raw, ref_channels=[mastoid_ref], copy=False, projection=False, 
                    ch_type='eeg', forward=None, verbose=None
                    )
                mne.set_bipolar_reference(
                    raw, emg_ch1, emg_ch2, ch_name='EMG', ch_info=None, 
                    drop_refs=True, copy=False, verbose=None
                    )
                
                textfile = glob.glob('/Users/thandrillon/Data/ICEBERG/Hypno/**/' + '*' + filename[:-4] + '*.TXT')
                if len(textfile)!=1:
                    print("... For ", filename, 
                          " found %.3f hypno files that could match the EEG" % len(textfile), 
                          " ...\n")
                    continue
                hypno = np.loadtxt(
                    textfile[0], 
                    dtype=str
                    )
                d = {
                    'M':'-1', 
                    '3': 'N3', 
                    '4': 'N3', 
                    '2': 'N2', 
                    '1': 'N1',
                    '?':'-2'
                    }
                for keys, values in d.items():
                    hypno = np.char.replace(hypno, keys, values)
                if hypno[0]=='Score':
                    hypno=hypno[1:]
                
                #### Yasa Part
                
                raw_filtered = raw.copy().filter(l_freq=0.4, h_freq=30)
                sls = yasa.SleepStaging(
                    raw_filtered, 
                    eeg_name = central_ch, 
                    eog_name = eog_ch, 
                    emg_name = "EMG")
            
                hypno_pred = sls.predict()
                accuracy = (
                    hypno == hypno_pred[:len(hypno)]).sum() / hypno_pred.size
                print("... For ", filename, 
                      " automatic sleep staging's accuracy is: %.3f" % accuracy, 
                      " ...\n")
                
                table_proba = sls.predict_proba();
                
                #### Outputs tables
                savename_hypno = filename[:-4] + "_hypnopred.txt"
                np.savetxt(
                    path_output_dir/savename_hypno, hypno_pred, fmt='%s'
                    )
                
                Lildf_pred = pd.DataFrame(
                    {
                        'Stage': hypno, 
                        'Pred': hypno_pred[:len(hypno)]
                        }
                    )
                Bigdf_pred = pd.concat(
                    [Lildf_pred, table_proba], 
                    axis = 1
                    )
                savename_pred = filename[:-4]+'_hypnoproba.txt'
                Bigdf_pred.to_csv(path_output_dir/savename_pred)
         
# %% Example Thomas
edf_to_yasa_ASSA('/Users/thandrillon/Data/ICEBERG/PSG/EDF PD/','/Users/thandrillon/Data/ICEBERG/Hypno','/Users/thandrillon/Data/ICEBERG/YASA','.edf','C3','A2','EMG 1','EMG 2','EOG G',1)


# %% Example

edf_to_yasa_ASSA(
        'path/to/raws', 
        'path/to/hypnograms',
        'path/to/output/file', 
        '.edf', 
        central_ch = 'C3',
        mastoid_ref = 'A2',
        emg_ch1 = 'EMG 1',
        emg_ch2 = 'EMG 2',
        eog_ch = 'EOG G',
        overwrite = True
        )



